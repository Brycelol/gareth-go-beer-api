---
swagger: "2.0"
info:
  description: "A simple demonstration API exposing operations for working with Beers"
  version: "1.0.0"
  title: "Gareth's Beer API"
  termsOfService: "http://swagger.io/terms/"
  contact:
    name: "Gareth Bryce"
host: "garethbryce.com"
basePath: "/api"
schemes:
- "http"
consumes:
- "application/json"
produces:
- "application/json"
paths:
  /beers:
    get:
      description: "Returns all beers from the system that the user has access to"
      operationId: "findbeers"
      produces:
      - "application/json"
      parameters:
      - name: "tags"
        in: "query"
        description: "tags to filter by"
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        x-exportParamName: "Tags"
      - name: "limit"
        in: "query"
        description: "maximum number of results to return"
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      responses:
        "200":
          description: "beer response"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/beer"
        default:
          description: "unexpected error"
          schema:
            $ref: "#/definitions/ErrorModel"
    post:
      description: "Creates a new beer in the store.  Duplicates are allowed"
      operationId: "addbeer"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "beer"
        description: "beer to add to the store"
        required: true
        schema:
          $ref: "#/definitions/NewBeer"
        x-exportParamName: "Beer"
      responses:
        "200":
          description: "beer response"
          schema:
            $ref: "#/definitions/beer"
        default:
          description: "unexpected error"
          schema:
            $ref: "#/definitions/ErrorModel"
  /beers/{id}:
    get:
      description: "Returns a user based on a single ID, if the user does not have\
        \ access to the beer"
      operationId: "findbeerById"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of beer to fetch"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "Id"
      responses:
        "200":
          description: "beer response"
          schema:
            $ref: "#/definitions/beer"
        default:
          description: "unexpected error"
          schema:
            $ref: "#/definitions/ErrorModel"
    delete:
      description: "deletes a single beer based on the ID supplied"
      operationId: "deletebeer"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of beer to delete"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "Id"
      responses:
        "204":
          description: "beer deleted"
        default:
          description: "unexpected error"
          schema:
            $ref: "#/definitions/ErrorModel"
definitions:
  beer:
    allOf:
    - $ref: "#/definitions/NewBeer"
    - required:
      - "id"
      properties:
        id:
          type: "integer"
          format: "int64"
  NewBeer:
    type: "object"
    required:
    - "name"
    properties:
      name:
        type: "string"
      brewer:
        type: "string"
    example:
      name: "name"
      brewer: "brewer"
  ErrorModel:
    type: "object"
    required:
    - "code"
    - "message"
    properties:
      code:
        type: "integer"
        format: "int32"
      message:
        type: "string"
